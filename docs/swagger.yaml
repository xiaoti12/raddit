basePath: /api
definitions:
  controller.ResponseCode:
    enum:
    - 1000
    - 1001
    - 1002
    - 1003
    - 1004
    - 1005
    - 1006
    - 1007
    type: integer
    x-enum-varnames:
    - CodeSuccess
    - CodeInvalidParams
    - CodeUserExist
    - CodeUserNotExist
    - CodeInvalidPassword
    - CodeNeedLogin
    - CodeInvalidToken
    - CodeServerError
  controller.ResponseData:
    properties:
      code:
        $ref: '#/definitions/controller.ResponseCode'
      data:
        description: may be string or json object
      msg:
        description: may be string or json object
    type: object
  controller.SwaggerCommunityDetailResponse:
    properties:
      code:
        $ref: '#/definitions/controller.ResponseCode'
      data:
        $ref: '#/definitions/models.CommunityDetail'
      msg:
        type: string
    type: object
  controller.SwaggerCommunityListResponse:
    properties:
      code:
        $ref: '#/definitions/controller.ResponseCode'
      data:
        items:
          $ref: '#/definitions/models.CommunityBasic'
        type: array
      msg:
        type: string
    type: object
  controller.SwaggerPostDetailResponse:
    properties:
      code:
        $ref: '#/definitions/controller.ResponseCode'
      data:
        $ref: '#/definitions/models.PostDetail'
      msg:
        type: string
    type: object
  controller.SwaggerPostListResponse:
    properties:
      code:
        $ref: '#/definitions/controller.ResponseCode'
      data:
        items:
          $ref: '#/definitions/models.PostDetail'
        type: array
      msg:
        type: string
    type: object
  models.CommunityBasic:
    properties:
      community_id:
        type: integer
      community_name:
        type: string
    type: object
  models.CommunityDetail:
    properties:
      community_id:
        type: integer
      community_name:
        type: string
      create_time:
        type: string
      introduction:
        type: string
      update_time:
        type: string
    type: object
  models.LoginParams:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Post:
    properties:
      author_id:
        example: "0"
        type: string
      community_id:
        type: integer
      content:
        type: string
      create_time:
        type: string
      post_id:
        example: "0"
        type: string
      status:
        type: integer
      title:
        type: string
    required:
    - community_id
    - content
    - title
    type: object
  models.PostDetail:
    properties:
      author_id:
        example: "0"
        type: string
      author_name:
        type: string
      community_id:
        type: integer
      community_name:
        type: string
      content:
        type: string
      create_time:
        type: string
      post_id:
        example: "0"
        type: string
      status:
        type: integer
      title:
        type: string
      vote_num:
        type: integer
    required:
    - community_id
    - content
    - title
    type: object
  models.RegisterParams:
    properties:
      password:
        type: string
      re_password:
        type: string
      username:
        type: string
    required:
    - password
    - re_password
    - username
    type: object
  models.VoteParams:
    properties:
      attitude:
        enum:
        - 1
        - 0
        - -1
        type: integer
      post_id:
        example: "0"
        type: string
      user_id:
        example: "0"
        type: string
    required:
    - post_id
    type: object
host: 127.0.0.1:8898
info:
  contact: {}
  description: This is a simple forum service.
  title: Raddit
  version: "1.0"
paths:
  /community/{id}:
    get:
      parameters:
      - description: community id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Authorization: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SwaggerCommunityDetailResponse'
      summary: get community detail info by id
      tags:
      - Community
  /create/post:
    post:
      consumes:
      - application/json
      parameters:
      - description: 'Authorization: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: create post params
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
      summary: create new post
      tags:
      - Post
  /list/community:
    get:
      parameters:
      - description: 'Authorization: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SwaggerCommunityListResponse'
      summary: get community basic info list
      tags:
      - Community
  /list/post:
    get:
      parameters:
      - description: 'Authorization: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SwaggerPostListResponse'
      summary: get post info list
      tags:
      - Post
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: login params
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.LoginParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
      summary: user login
      tags:
      - User
  /post/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: 'Authorization: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: post id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SwaggerPostDetailResponse'
      summary: get post detail by id
      tags:
      - Post
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: register params
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.RegisterParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
      summary: register new user
      tags:
      - User
  /vote:
    post:
      consumes:
      - application/json
      parameters:
      - description: 'Authorization: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: vote params
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.VoteParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
      summary: vote for post
      tags:
      - Post
swagger: "2.0"
